{
    "$schema": "https://raw.githubusercontent.com/unoforge/cli/main/registry-item.json",
    "version": "1.0.0",
    "name": "callout",
    "type": "registry:component",
    "title": "Callout",
    "description": "A reusable callout component for Laravel Blade/Livewire.",
    "registryDependencies": [
        "alert"
    ],
    "files": [
        {
            "path": "resources/views/components/ui/callout.blade.php",
            "type": "registry:component",
            "target": "resources/views/components/ui/callout.blade.php",
            "content": "@props([\n    'class' => '',\n    'variant' => 'solid',\n    'intent' => '',\n    'type' => 'default',\n    'size' => 'default',\n    'radius' => 'md',\n    'title' => null,\n    'message' => null,\n    'noIcon' => false,\n    'iconWrapper' => '',\n])\n\n@php\n    $callout_types = [\n        'default' => 'gray',\n        'update' => 'info',\n        'note' => 'primary',\n        'warning' => 'warning',\n        'important' => 'danger',\n    ];\n\n    $icons = [\n        'default' => 'ph--info',\n        'update' => 'ph--none',\n        'note' => 'ph--lightbulb-filament',\n        'warning' => 'ph--warning',\n        'important' => 'ph--smiley-sad',\n    ];\n\n    $intent_ = isset($intent) && $intent != '' ? $intent : $callout_types[$type] ?? $callout_types['default'];\n    $icon = $icons[$type] ?? $icons['default'];\n@endphp\n\n<x-ui.alert :variant=\"$variant\" :intent=\"$intent_\" :size=\"$size\" :radius=\"$radius\"\n    {{ $attributes->class([\n        'flex items-start gap-4' => !$noIcon,\n        $class,\n    ]) }}>\n    @if (!$noIcon)\n        <span class=\"w-max {{ $iconWrapper }}\">\n            <span aria-hidden=\"true\" class=\"iconify size-6 {{ $icon }}\"></span>\n        </span>\n    @endif\n\n    @if ($title || $message)\n        @if (!$noIcon)\n            <div class=\"flex-1 flex flex-col gap-3\">\n                @if ($title)\n                    <x-ui.callout.title text=\"{{ $title }}\" />\n                @endif\n                @if ($message)\n                    <x-ui.callout.description>\n                        {{ $message }}\n                    </x-ui.callout.description>\n                @endif\n            </div>\n        @else\n            {{ $slot }}\n        @endif\n    @else\n        @if (!$noIcon)\n            <div class=\"flex-1 flex flex-col gap-3\">\n                {{ $slot }}\n            </div>\n        @else\n            {{ $slot }}\n        @endif\n    @endif\n</x-ui.alert>\n"
        },
        {
            "path": "app/Flexiwind/UiHelper.php",
            "type": "registry:utils",
            "target": "app/Flexiwind/UiHelper.php",
            "content": "<?php\n\nnamespace App\\Flexiwind;\n\nclass UiHelper\n{\n    protected static array $variants = [\n        'none' => [],\n        'solid' => [\n            'base' => 'ui-solid',\n            'intent' => [\n                'primary' => 'ui-solid-primary',\n                'secondary' => 'ui-solid-secondary',\n                'success' => 'ui-solid-success',\n                'danger' => 'ui-solid-danger',\n                'warning' => 'ui-solid-warning',\n                'info' => 'ui-solid-info',\n                'gray' => 'ui-solid-gray',\n                'neutral'=>'ui-solid-neutral'\n            ],\n        ],\n        'soft' => [\n            'base' => 'ui-soft',\n            'intent' => [\n                'primary' => 'ui-soft-primary',\n                'secondary' => 'ui-soft-secondary',\n                'accent'=>'ui-soft-accent',\n                'success' => 'ui-soft-success',\n                'danger' => 'ui-soft-danger',\n                'warning' => 'ui-soft-warning',\n                'info' => 'ui-soft-info',\n                'gray' => 'ui-soft-gray',\n                'neutral' => 'ui-soft-neutral'\n            ],\n        ],\n        'subtle' => [\n            'base' => 'ui-subtle',\n            'intent' => [\n                'primary' => 'ui-subtle-primary',\n                'secondary' => 'ui-subtle-secondary',\n                'success' => 'ui-subtle-success',\n                'danger' => 'ui-subtle-danger',\n                'accent'=>'ui-subtle-accent',\n                'warning' => 'ui-subtle-warning',\n                'info' => 'ui-subtle-info',\n                'gray' => 'ui-subtle-gray',\n                'neutral' => 'ui-subtle-neutral'\n            ],\n        ],\n        'outline' => [\n            'base' => 'ui-outline',\n            'intent' => [\n                'primary' => 'ui-outline-primary',\n                'secondary' => 'ui-outline-secondary',\n                'success' => 'ui-outline-success',\n                'danger' => 'ui-outline-danger',\n                'warning' => 'ui-outline-warning',\n                'info' => 'ui-outline-info',\n                'gray' => 'ui-outline-gray',\n                'neutral' => 'ui-outline-neutral'\n            ],\n        ],\n    ];\n\n    protected static array $all_radius = [\n        'none' => '',\n        'xs' => 'rounded-xs',\n        'sm' => 'rounded-sm',\n        'md' => 'rounded-md',\n        'lg' => 'rounded-lg',\n        'xl' => 'rounded-xl',\n        '2xl' => 'rounded-2xl',\n        '3xl' => 'rounded-3xl',\n        'circle' => 'rounded-full'\n    ];\n\n    protected static array $all_card_radius = [\n        'none'  => '[--card-radius:var(--ui-radius,0px)]',\n        'xs'    => '[--card-radius:var(--ui-radius,var(--radius-xs))]',\n        'sm'    => '[--card-radius:var(--ui-radius,var(--radius-sm))]',\n        'md'    => '[--card-radius:var(--ui-radius,var(--radius-md))]',\n        'lg'    => '[--card-radius:var(--ui-radius,var(--radius-lg))]',\n        'xl'    => '[--card-radius:var(--ui-radius,var(--radius-xl))]',\n        '2xl'   => '[--card-radius:var(--ui-radius,var(--radius-2xl))]',\n        '3xl'   => '[--card-radius:var(--ui-radius,var(--radius-3xl))]',\n        'circle' => '[--card-radius:var(--ui-radius,var(--radius-circle))]',\n    ];\n\n    public static function getVariants()\n    {\n        return self::$variants;\n    }\n\n    public static function getCardRadius(string $radius = 'md')\n    {\n        return self::$all_card_radius[$radius] ?? self::$all_card_radius['md'];\n    }\n\n    public static function getRadius(string $radius = 'md')\n    {\n        return self::$all_radius[$radius] ?? self::$all_radius['md'];\n    }\n\n    public static function getClasses(string $variant = 'solid', ?string $intent = 'gray'): string\n    {\n        $variantConfig = self::$variants[$variant] ?? [];\n        $base = $variantConfig['base'] ?? '';\n        $intentClass = $variantConfig['intent'][$intent] ?? '';\n        return trim(\"$base $intentClass\");\n    }\n}\n"
        }
    ]
}