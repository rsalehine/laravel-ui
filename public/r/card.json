{
    "$schema": "https://raw.githubusercontent.com/unoforge/cli/main/registry-item.json",
    "version": "1.0.0",
    "name": "card",
    "type": "registry:component",
    "title": "Card",
    "description": "A reusable card component for Laravel Blade/Livewire.",
    "files": [
        {
            "path": "resources/views/components/ui/card.blade.php",
            "type": "registry:component",
            "target": "resources/views/components/ui/card.blade.php",
            "content": "@props([\n    'fill' => 'default',\n    'size' => 'default',\n    'variant' => 'none',\n    'intent' => 'gray',\n    'noBorder' => false,\n    'radius' => 'md',\n    'class' => '',\n    'noShadow' => false,\n])\n\n@php\n    use App\\Flexiwind\\UiHelper;\n    $variants = UiHelper::getVariants();\n    $radius_class = UiHelper::getCardRadius($radius);\n    $variantClass = $variant == 'none' ? '' : UiHelper::getClasses($variant, $intent);\n\n@endphp\n<div\n    {{ $attributes->class([\n        'relative p-(--card-padding) rounded-(--card-radius) text-sm',\n        '[--card-padding:var(--ui-padding,--spacing(4))]' => $size=='default',\n        '[--card-padding:var(--ui-padding,--spacing(0.5))]' => $size=='2xs',\n        '[--card-padding:var(--ui-padding,--spacing(1))]' => $size=='xs',\n        '[--card-padding:var(--ui-padding,--spacing(2.5)]' => $size=='sm',\n        '[--card-padding:var(--ui-padding,--spacing(5)]' => $size=='lg',\n        'bg-bg-card text-fg' => $fill == 'default' && $variant == 'none',\n        'bg-bg-card-gray text-fg' => $fill == 'gray' && $variant == 'none',\n        'border border-border-card' => !$noBorder && $variant == 'none',\n        'shadow-sm' => !$noShadow,\n        $radius_class,\n        $variantClass,\n        $class,\n    ]) }}>\n    {{ $slot }}\n</div>\n"
        },
        {
            "path": "resources/views/components/ui/card/content.blade.php",
            "type": "registry:component",
            "target": "resources/views/components/ui/card/content.blade.php",
            "content": "@props(['class' => '', 'gap' => '3'])\n\n<div\n    {{ $attributes->class([\n        'flex flex-col',\n        'gap-1' => $gap == '1',\n        'gap-2' => $gap == '2',\n        'gap-3' => $gap == '3',\n        'gap-4' => $gap == '4',\n        $class,\n    ]) }}>\n    {{ $slot }}\n</div>\n"
        },
        {
            "path": "resources/views/components/ui/card/description.blade.php",
            "type": "registry:component",
            "target": "resources/views/components/ui/card/description.blade.php",
            "content": "@props(['text' => null, 'class' => '', 'size' => 'sm'])\n<p\n    {{ $attributes->class([\n        'text-pretty',\n        'text-sm' => $size == 'sm',\n        'text-base' => $size == 'base',\n        'text-lg' => $size == 'lg',\n        $class,\n    ]) }}>\n    @if ($text)\n        {{ $text }}\n    @else\n        {{ $slot }}\n    @endif\n</p>\n"
        },
        {
            "path": "resources/views/components/ui/card/footer.blade.php",
            "type": "registry:component",
            "target": "resources/views/components/ui/card/footer.blade.php",
            "content": "<div {{ $attributes }}>\n    {{ $slot }}\n</div>\n"
        },
        {
            "path": "resources/views/components/ui/card/header.blade.php",
            "type": "registry:component",
            "target": "resources/views/components/ui/card/header.blade.php",
            "content": "@props(['direction' => 'column', 'justify' => 'start', 'class' => '', 'flexNone' => false, 'gap' => '2'])\n\n<div\n    {{ $attributes->class([\n        'flex' => !$flexNone,\n        'flex-col' => $direction == 'column' && !$flexNone,\n        'flex-row' => $direction == 'row' && !$flexNone,\n        'justify-start' => $justify == 'start' && !$flexNone,\n        'justify-end' => $justify == 'end' && !$flexNone,\n        'justify-center' => $justify == 'center' && !$flexNone,\n        'gap-1' => $gap == '1' && !$flexNone,\n        'gap-2' => $gap == '2' && !$flexNone,\n        'gap-3' => $gap == '3' && !$flexNone,\n        'gap-4' => $gap == '4' && !$flexNone,\n        $class,\n    ]) }}>\n    {{ $slot }}\n</div>\n"
        },
        {
            "path": "resources/views/components/ui/card/title.blade.php",
            "type": "registry:component",
            "target": "resources/views/components/ui/card/title.blade.php",
            "content": "@props(['level' => '2', 'text' => null, 'size' => 'lg', 'class' => '', 'weight' => 'semibold'])\n@php\n    $levels = [\n        '1' => 'h1',\n        '2' => 'h2',\n        '3' => 'h3',\n        '4' => 'h4',\n    ];\n    $tag = $levels[$level] ?? $levels['2'];\n@endphp\n\n<{{ $tag }}\n    {{ $attributes->class([\n        'text-balance text-fg-title',\n        'text-lg/6 md:text-xl/6' => $size == 'lg',\n        'text-sm md:text-base/6' => $size == 'sm',\n        'text-base/6 md:text-lg/6' => $size == 'md',\n        'text-xl/6 md:text-2xl/6' => $size == 'xl',\n        'font-semibold' => $weight === 'semibold',\n        'font-bold' => $weight === 'bold',\n        'font-medium' => $weight === 'medium',\n        $class,\n    ]) }}>\n    @if ($text)\n        {{ $text }}\n    @else\n        {{ $slot }}\n    @endif\n    </{{ $tag }}>\n"
        },
        {
            "path": "app/Flexiwind/UiHelper.php",
            "type": "registry:utils",
            "target": "app/Flexiwind/UiHelper.php",
            "content": "<?php\n\nnamespace App\\Flexiwind;\n\nclass UiHelper\n{\n    protected static array $variants = [\n        'none' => [],\n        'solid' => [\n            'base' => 'ui-solid',\n            'intent' => [\n                'primary' => 'ui-solid-primary',\n                'secondary' => 'ui-solid-secondary',\n                'success' => 'ui-solid-success',\n                'danger' => 'ui-solid-danger',\n                'warning' => 'ui-solid-warning',\n                'info' => 'ui-solid-info',\n                'gray' => 'ui-solid-gray',\n                'neutral'=>'ui-solid-neutral'\n            ],\n        ],\n        'soft' => [\n            'base' => 'ui-soft',\n            'intent' => [\n                'primary' => 'ui-soft-primary',\n                'secondary' => 'ui-soft-secondary',\n                'accent'=>'ui-soft-accent',\n                'success' => 'ui-soft-success',\n                'danger' => 'ui-soft-danger',\n                'warning' => 'ui-soft-warning',\n                'info' => 'ui-soft-info',\n                'gray' => 'ui-soft-gray',\n                'neutral' => 'ui-soft-neutral'\n            ],\n        ],\n        'subtle' => [\n            'base' => 'ui-subtle',\n            'intent' => [\n                'primary' => 'ui-subtle-primary',\n                'secondary' => 'ui-subtle-secondary',\n                'success' => 'ui-subtle-success',\n                'danger' => 'ui-subtle-danger',\n                'accent'=>'ui-subtle-accent',\n                'warning' => 'ui-subtle-warning',\n                'info' => 'ui-subtle-info',\n                'gray' => 'ui-subtle-gray',\n                'neutral' => 'ui-subtle-neutral'\n            ],\n        ],\n        'outline' => [\n            'base' => 'ui-outline',\n            'intent' => [\n                'primary' => 'ui-outline-primary',\n                'secondary' => 'ui-outline-secondary',\n                'success' => 'ui-outline-success',\n                'danger' => 'ui-outline-danger',\n                'warning' => 'ui-outline-warning',\n                'info' => 'ui-outline-info',\n                'gray' => 'ui-outline-gray',\n                'neutral' => 'ui-outline-neutral'\n            ],\n        ],\n    ];\n\n    protected static array $all_radius = [\n        'none' => '',\n        'xs' => 'rounded-xs',\n        'sm' => 'rounded-sm',\n        'md' => 'rounded-md',\n        'lg' => 'rounded-lg',\n        'xl' => 'rounded-xl',\n        '2xl' => 'rounded-2xl',\n        '3xl' => 'rounded-3xl',\n        'circle' => 'rounded-full'\n    ];\n\n    protected static array $all_card_radius = [\n        'none'  => '[--card-radius:var(--ui-radius,0px)]',\n        'xs'    => '[--card-radius:var(--ui-radius,var(--radius-xs))]',\n        'sm'    => '[--card-radius:var(--ui-radius,var(--radius-sm))]',\n        'md'    => '[--card-radius:var(--ui-radius,var(--radius-md))]',\n        'lg'    => '[--card-radius:var(--ui-radius,var(--radius-lg))]',\n        'xl'    => '[--card-radius:var(--ui-radius,var(--radius-xl))]',\n        '2xl'   => '[--card-radius:var(--ui-radius,var(--radius-2xl))]',\n        '3xl'   => '[--card-radius:var(--ui-radius,var(--radius-3xl))]',\n        'circle' => '[--card-radius:var(--ui-radius,var(--radius-circle))]',\n    ];\n\n    public static function getVariants()\n    {\n        return self::$variants;\n    }\n\n    public static function getCardRadius(string $radius = 'md')\n    {\n        return self::$all_card_radius[$radius] ?? self::$all_card_radius['md'];\n    }\n\n    public static function getRadius(string $radius = 'md')\n    {\n        return self::$all_radius[$radius] ?? self::$all_radius['md'];\n    }\n\n    public static function getClasses(string $variant = 'solid', ?string $intent = 'gray'): string\n    {\n        $variantConfig = self::$variants[$variant] ?? [];\n        $base = $variantConfig['base'] ?? '';\n        $intentClass = $variantConfig['intent'][$intent] ?? '';\n        return trim(\"$base $intentClass\");\n    }\n}\n"
        }
    ]
}