{
    "$schema": "https://raw.githubusercontent.com/unoforge/cli/main/registry-item.json",
    "version": "1.0.0",
    "name": "alert",
    "type": "registry:component",
    "title": "Alert",
    "description": "A reusable alert component for Laravel Blade/Livewire.",
    "files": [
        {
            "path": "resources/views/components/ui/alert.blade.php",
            "type": "registry:component",
            "target": "resources/views/components/ui/alert.blade.php",
            "content": "@props(['class' => '', 'variant' => 'solid', 'intent' => 'gray', 'size' => 'default', 'radius'=>'md'])\n\n@php\n    use App\\Flexiwind\\UiHelper;\n    $variants = UiHelper::getVariants();\n\n    $radius_class = UiHelper::getRadius($radius);\n\n    $sizes = [\n        'default' => 'p-4 text-sm',\n        'xs' => 'p-1.5 text-xs',\n        'sm' => 'p-2.5 text-sm',\n        'lg' => 'p-5',\n    ];\n    \n    $base = \"relative w-full {$sizes[$size ?? 'default']} \";\n\n    $variantClass = $variant == 'default' ? ' bg-bg-subtle text-fg' : UiHelper::getClasses($variant, $intent);\n\n    $className = \"{$base} {$variantClass} {$class} {$radius_class}\";\n@endphp\n\n<div {{ $attributes->merge(['class' => $className]) }}>\n    {{ $slot }}\n</div>"
        },
        {
            "path": "app/Flexiwind/UiHelper.php",
            "type": "registry:utils",
            "target": "app/Flexiwind/UiHelper.php",
            "content": "<?php\n\nnamespace App\\Flexiwind;\n\nclass UiHelper\n{\n    protected static array $variants = [\n        'none' => [],\n        'solid' => [\n            'base' => 'ui-solid',\n            'intent' => [\n                'primary' => 'ui-solid-primary',\n                'secondary' => 'ui-solid-secondary',\n                'success' => 'ui-solid-success',\n                'danger' => 'ui-solid-danger',\n                'warning' => 'ui-solid-warning',\n                'info' => 'ui-solid-info',\n                'gray' => 'ui-solid-gray',\n                'neutral'=>'ui-solid-neutral'\n            ],\n        ],\n        'soft' => [\n            'base' => 'ui-soft',\n            'intent' => [\n                'primary' => 'ui-soft-primary',\n                'secondary' => 'ui-soft-secondary',\n                'accent'=>'ui-soft-accent',\n                'success' => 'ui-soft-success',\n                'danger' => 'ui-soft-danger',\n                'warning' => 'ui-soft-warning',\n                'info' => 'ui-soft-info',\n                'gray' => 'ui-soft-gray',\n                'neutral' => 'ui-soft-neutral'\n            ],\n        ],\n        'subtle' => [\n            'base' => 'ui-subtle',\n            'intent' => [\n                'primary' => 'ui-subtle-primary',\n                'secondary' => 'ui-subtle-secondary',\n                'success' => 'ui-subtle-success',\n                'danger' => 'ui-subtle-danger',\n                'accent'=>'ui-subtle-accent',\n                'warning' => 'ui-subtle-warning',\n                'info' => 'ui-subtle-info',\n                'gray' => 'ui-subtle-gray',\n                'neutral' => 'ui-subtle-neutral'\n            ],\n        ],\n        'outline' => [\n            'base' => 'ui-outline',\n            'intent' => [\n                'primary' => 'ui-outline-primary',\n                'secondary' => 'ui-outline-secondary',\n                'success' => 'ui-outline-success',\n                'danger' => 'ui-outline-danger',\n                'warning' => 'ui-outline-warning',\n                'info' => 'ui-outline-info',\n                'gray' => 'ui-outline-gray',\n                'neutral' => 'ui-outline-neutral'\n            ],\n        ],\n    ];\n\n    protected static array $all_radius = [\n        'none' => '',\n        'xs' => 'rounded-xs',\n        'sm' => 'rounded-sm',\n        'md' => 'rounded-md',\n        'lg' => 'rounded-lg',\n        'xl' => 'rounded-xl',\n        '2xl' => 'rounded-2xl',\n        '3xl' => 'rounded-3xl',\n        'circle' => 'rounded-full'\n    ];\n\n    protected static array $all_card_radius = [\n        'none'  => '[--card-radius:var(--ui-radius,0px)]',\n        'xs'    => '[--card-radius:var(--ui-radius,var(--radius-xs))]',\n        'sm'    => '[--card-radius:var(--ui-radius,var(--radius-sm))]',\n        'md'    => '[--card-radius:var(--ui-radius,var(--radius-md))]',\n        'lg'    => '[--card-radius:var(--ui-radius,var(--radius-lg))]',\n        'xl'    => '[--card-radius:var(--ui-radius,var(--radius-xl))]',\n        '2xl'   => '[--card-radius:var(--ui-radius,var(--radius-2xl))]',\n        '3xl'   => '[--card-radius:var(--ui-radius,var(--radius-3xl))]',\n        'circle' => '[--card-radius:var(--ui-radius,var(--radius-circle))]',\n    ];\n\n    public static function getVariants()\n    {\n        return self::$variants;\n    }\n\n    public static function getCardRadius(string $radius = 'md')\n    {\n        return self::$all_card_radius[$radius] ?? self::$all_card_radius['md'];\n    }\n\n    public static function getRadius(string $radius = 'md')\n    {\n        return self::$all_radius[$radius] ?? self::$all_radius['md'];\n    }\n\n    public static function getClasses(string $variant = 'solid', ?string $intent = 'gray'): string\n    {\n        $variantConfig = self::$variants[$variant] ?? [];\n        $base = $variantConfig['base'] ?? '';\n        $intentClass = $variantConfig['intent'][$intent] ?? '';\n        return trim(\"$base $intentClass\");\n    }\n}\n"
        }
    ]
}